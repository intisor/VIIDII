@page
@using FutaMeetWeb.Models
@model FutaMeetWeb.Pages.CreateSessionModel
@{
    ViewData["Title"] = "Create Session - FutaMeet";
    Layout = null;
}
<style>
    body {
        margin: 0;
        padding: 0;
        background: #F9FAFB;
        font-family: 'Poppins', sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        color: #333;
        position: relative;
        overflow: hidden;
    }

    .top-curve-wrapper {
        position: absolute;
        top: -100px;
        left: -100px;
        z-index: 0;
        width: 300px;
        height: 300px;
    }

    .top-curve-rect-1 {
        position: absolute;
        width: 245px;
        height: 245px;
        background: linear-gradient(128.97deg, #8338EC 2.4%, #C19BF5 85.87%);
        border-radius: 50%;
        top: 0;
        left: 0;
        filter: blur(2.5px);
        z-index: 1;
    }

    .top-curve-rect-2 {
        position: absolute;
        width: 140px;
        height: 140px;
        background: linear-gradient(151.12deg, #3A86FF 29.33%, #9CC3FF 86.49%);
        border-radius: 50%;
        top: 30px;
        left: 30px;
        filter: blur(2.5px);
        z-index: 2;
    }

    .message-popup {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: #333;
        color: #fff;
        padding: 15px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        z-index: 1000;
    }

        .message-popup.show {
            opacity: 1;
        }

    .top-action-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        min-width: 120px;
        height: 48px;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 20px;
        color: #fff !important;
        text-decoration: none;
        border: none;
        outline: none;
        margin: 0 0 0 12px;
        padding: 0 24px;
        box-shadow: 0 4px 16px rgba(58,134,255,0.10);
        transition: background 0.2s, color 0.2s;
        cursor: pointer;
    }

        .top-action-btn.home {
            background: linear-gradient(135deg, #3A86FF 0%, #6DD5FA 100%);
        }

        .top-action-btn.logout {
            background: linear-gradient(135deg, #8338EC 0%, #C19BF5 100%);
        }

        .top-action-btn:active,
        .top-action-btn:focus,
        .top-action-btn:hover {
            opacity: 0.92;
            color: #fff !important;
        }
    .container {
        position: relative;
        padding: 1rem; /* Adjust padding as needed */
        margin-top: -1rem; /* Adjust margin as needed */
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

        .container::before { 
             content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            margin: -2px; 
         
            border-radius: 10px; 
        }

    .login-container {
        text-align: center;
        background: white;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        max-width: 400px;
        width: 100%;
        z-index: 1;
    }

    h1 {
        font-size: 2rem;
        margin-bottom: 1.5rem;
        color: #FFFFFF;
        text-align: center;
        background: linear-gradient(135deg, #8338EC, #3A86FF);
        padding: 1rem;
        border-radius: 12px 12px 0 0;
    }

    .input-group {
        margin-bottom: 1rem;
        text-align: left;
        padding: 0 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        color: #565D68;
    }

    input, select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #A26AF1;
        border-radius: 8px;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
    }

    button {
        display: inline-block;
        width: 100%;
        padding: 12px;
        background: linear-gradient(135deg, #8338EC, #3A86FF);
        color: white;
        border: none;
        border-radius: 24px;
        font-size: 1rem;
        cursor: pointer;
        margin-top: 1rem;
        text-decoration: none;
    }

    details {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 1rem;
    }

    summary {
        font-weight: bold;
        cursor: pointer;
        outline: none;
    }

        summary::-webkit-details-marker {
            display: none;
        }

        summary:after {
            content: '+';
            display: inline-block;
            margin-left: 5px;
        }

    details[open] summary:after {
        content: '-';
    }

    .form-check {
        margin-bottom: 10px;
    }

    .form-check-input {
        margin-right: 10px;
    }

    .form-check-label {
        cursor: pointer;
    }

    .session-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        width: 90vw;
        max-height: calc(100vh - 170px); /* Adjust height to ensure it doesn't touch the top curve, considering margin-top */
        margin-top: 150px; /* Fixed margin to prevent overlap with the top curve */
        padding: 10px;
        gap: 10px;
        box-sizing: border-box;
        overflow-y: auto; /* Allow scrolling if content overflows */
    }

    .video-section {
        flex: 3;
        display: flex;
        flex-direction: column;
        height: 100%;
        margin-bottom: 10px;
    }

    .participants-messages-section {
        flex: 1;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .participants-section, .messages-section {
        background-color: #e3f2fd;
        padding: 10px;
        border-radius: 10px;
        margin-bottom: 10px;
        box-sizing: border-box;
        flex: 1; /* Fill parent toggle-container */
        min-height: 0; /* Allow shrinking */
        display: flex; /* Layout children (h4, list, input) in a column */
        flex-direction: column;
    }

    .participant-list, .message-list {
        flex: 1; /* Take remaining vertical space */
        min-height: 0; /* Allow shrinking if needed */
        overflow-y: auto;
        padding: 10px;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
    }

    .message-box {
        margin-bottom: 10px;
        max-width: 80%;
        padding: 8px 12px;
        border-radius: 15px;
        word-wrap: break-word;
    }

    .message {
        display: flex;
        flex-direction: column;
    }

    .lecturer-msg {
        background-color: #DCF8C6; /* Green for posts */
        align-self: flex-start; /* Left align posts */
        border-bottom-left-radius: 0; /* Speech bubble effect */
    }

    .student-reply-msg, .lecturer-reply-msg, .self-reply-msg { /* Base for replies */
        background-color: #E0E0E0; /* Contrasting color for replies */
        align-self: flex-end;   /* Right align replies */
        border-bottom-right-radius: 0; /* Speech bubble effect */
    }
    
    .self-reply-msg {
        background-color: #AED6F1; /* Different color for self-replies */
    }

    .lecturer-reply-msg {
        background-color: #FADBD8; /* Different color for lecturer replies */
    }

    .username {
        font-weight: bold;
        font-size: 0.9em;
        margin-bottom: 3px;
        color: #555;
    }

    .content {
        font-size: 1em;
        color: #333;
    }

    .message-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.8em;
        color: #777;
        margin-top: 5px;
    }

    .timestamp {
        margin-right: 10px;
    }

    .reply-btn {
        background: none;
        border: none;
        color: #007bff;
        cursor: pointer;
        font-size: 0.9em;
        padding: 0;
    }

    #postInput {
        flex-grow: 1;
        margin-right: 5px;
    }

    .input-group.mt-2 {
        display: flex; /* Make input and button align nicely */
        align-items: center;
    }

    #startSessionForm, #SessionControlForm {
        width: 100%;
        text-align: center; /* Center the button text */
    }

        #startSession, #SessionControlForm button {
            padding: 12px;
            background: linear-gradient(135deg, #8338EC, #3A86FF);
            color: white;
            border: none;
            border-radius: 24px;
            font-size: 1rem;
            cursor: pointer;
            margin: 30 auto; /* Center the button horizontally */
            display: inline-block; /* Ensure the button is treated as an inline block for margin auto to work */
            max-width: 200px; /* Set a maximum width for the button to ensure it doesn't stretch too wide */
        }
    .btn-toggle {
        padding: 10px;
        background-color: #8338EC;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 10px;
    }

    .toggle-container {
        width: 100%;
        flex: 1;
        min-height: 0; /* Allow shrinking */
        display: flex; /* Make it a flex container for its child section */
        flex-direction: column;
    }


    .input-group {
        display: flex;
        flex-direction: column;
    }

        .input-group textarea {
            margin-bottom: 10px;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .input-group button {
            padding: 10px;
            background-color: #8338EC;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

    /* Mobile Design */
    @@media only screen and (max-width: 480px) {
        body

    {
        background: #F9FAFB;
        justify-content: flex-start;
        padding-top: 0;
        min-height: 100vh;
        margin: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .gradient-background {
        position: absolute;
        width: 100%;
        height: 426px;
        left: 0;
        bottom: 0;
        background: linear-gradient(306.91deg, #3A86FF 13.83%, #9CC3FF 108.03%);
        box-shadow: 0px -10px 20px rgba(58, 134, 255, 0.25);
        border-radius: 50px 50px 0px 0px;
        z-index: 0;
    }

    .login-container {
        position: absolute;
        bottom: 10%;
        left: 50%;
        transform: translateX(-50%);
        background: none;
        box-shadow: none;
        border-radius: 0;
        padding: 0;
        width: 100%;
        max-width: 333px;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 0;
        z-index: 1;
    }

    h1 {
        font-size: 2.1rem;
        margin-top: 2rem;
        margin-bottom: 0.5rem;
        color: #FFFFFF;
        text-align: center;
        background: linear-gradient(135deg, #8338EC, #3A86FF);
        padding: 1.5rem 1rem;
        border-radius: 12px 12px 0 0;
        width: 100%;
        max-width: 333px;
    }

    .input-group {
        margin-bottom: 1rem;
        width: 100%;
        max-width: 333px;
        position: relative;
    }

    input, select {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #A26AF1;
        border-radius: 8px;
        box-sizing: border-box;
        background: rgba(255, 255, 255, 0.9);
        color: #333;
    }

    button {
        width: 100%;
        max-width: 333px;
        height: 56px;
        box-sizing: border-box;
        border: 2.5px solid #FFFFFF;
        border-radius: 24px;
        background: linear-gradient(135deg, #8338EC, #3A86FF);
        color: #FFFFFF;
        font-size: 1.2rem;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 1rem auto 1rem auto;
        text-decoration: none;
        transition: background 0.2s, color 0.2s;
    }

        button:active,
        button:focus,
        button:hover {
            background: rgba(255, 255, 255, 0.12);
            color: #FFFFFF;
        }

    }
</style>
<div class="top-curve-wrapper">
    <div class="top-curve-rect-1"></div>
    <div class="top-curve-rect-2"></div>
</div>
<div style="position:fixed;top:24px;right:32px;z-index:100;display:flex;gap:12px;">
    <a asp-page="/Login" class="top-action-btn home">Home</a>
    <form method="post" asp-page-handler="Logout" style="display:inline;">
        <button type="submit" class="top-action-btn logout">Sign Out</button>
    </form>
</div>
 @if (string.IsNullOrEmpty(Model.CurrentSessionId))
{
    <div class="container mt-4">
        <h2 class="text-center mb-4 modern-heading">Create a Session </h2>
        <div id="main-content">
       
            <form method="post" class="modern-form p-4 mb-4">
                <div class="mb-3">
                    <label asp-for="Title" class="form-label modern-label">Session Title</label>
                    <input asp-for="Title" class="form-control modern-input" required />
                </div>
                <div class="mb-3">
                    <details>
                        <summary>Allowed Departments</summary>
                        @foreach (var department in Model.DepartmentOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="AllowedDepartments" value="@department.Value" id="@($"chkDepartment{department.Value}")">
                                <label class="form-check-label" for="@($"chkDepartment{department.Value}")">
                                    @department.Text
                                </label>
                            </div>
                        }
                    </details>
                </div>

                <div class="mb-3">
                    <details>
                        <summary>Allowed Levels</summary>
                        @foreach (var level in Model.LevelOptions)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="AllowedLevels" value="@level.Value" id="@($"chkLevel{level.Value}")">
                                <label class="form-check-label" for="@($"chkLevel{level.Value}")">
                                    @level.Text
                                </label>
                            </div>
                        }
                    </details>
                </div>
                <button type="submit" class="btn btn-skeuo w-100">
                    <i class="fas fa-plus-circle"></i> Create Session
                </button>
            </form>
        </div>
    </div>
}
@if (!string.IsNullOrEmpty(Model.Message) && (Model.CurrentSessionId != null) && Model.Session?.Status != SessionStatus.Ended)
{
    <div class="row mt-md-5 ms-5" style="height: 450px;">
        <div class="col-md-6 col-lg-8">
            <video id="sessionVideo" data-session-id="@Model.CurrentSessionId" autoplay muted class="vstack pb-md-0 mb-md-4" style="height: 350px;width: 100%; max-height: 400px; background: black;"></video>
            <div class="vstack" style="height: 100px;">
                @if (!Model.IsSessionStarted)
                {
                    <form id="startSessionForm" method="post" asp-page-handler="StartSession" class="w-100">
                        <input type="hidden" name="sessionId" value="@Model.CurrentSessionId" />
                        <button id="startSession" class="btn btn-skeuo flex-fill" type="submit">
                            <i class="fas fa-play"></i> Start Session
                        </button>
                    </form>
                }
                else
                {
                    <div class="container" id="SessionControlForm" style="height:100px;">
                        <div class="row">
                            <div class="col-auto">
                                <form method="post" asp-page-handler="EndSession" class="d-flex align-items-center w-100">
                                    <input type="hidden" name="sessionId" value="@Model.CurrentSessionId" />
                                    <button type="submit" class="btn btn-skeuo flex-fill">
                                        <i class="fas fa-stop"></i> End Session
                                    </button>
                                </form>
                            </div>
                            <div class="col-auto">
                                <button id="toggleAudio" class="btn btn-skeuo flex-fill" type="button" onclick="toggleAudio()">
                                    <i class="fas fa-microphone-slash"></i> Mute
                                </button>
                            </div>
                            <div class="col-auto">
                                <button id="shareScreen" class="btn btn-skeuo flex-fill" type="button">
                                    <i class="fas fa-desktop"></i> Share Screen
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6 col-lg-3 ms-3" style="width:200px;">
              <div class="participants-messages-section"> 
                <button id="toggleView" class="btn btn-toggle">
                    Show Discussion
                </button>
                <div id="participantsContainer" class="toggle-container">
                    <div class="participants-section">
                        <h4>Participants</h4>
                        <div id="participantPanel" class="participant-list">
                            <!-- Participant list will be dynamically added here -->
                        </div>
                    </div>
                </div>
                <div id="discussionContainer" class="toggle-container" style="display: none;">
                    <div class="messages-section">
                        <h4>Messages</h4>
                        <div id="discussion" class="message-list" data-session-id="@Model.CurrentSessionId">
                            <!-- Messages will be dynamically added here -->
                        </div>
                        <div class="input-group mt-2">
                            <input type="text" id="postInput" rows="2" class="modern-input" placeholder="Create Post...">
                            <button id="createPost" class="btn btn-skeuo">
                                <i class="fas fa-paper-plane"></i> Post
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div id="messagePopup" class="message-popup">
    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <p>@Model.Message</p>
    }
</div>

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" rel="stylesheet" />
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
@* <link href="~/css/site.css" rel="stylesheet" /> *@
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://unpkg.com/peerjs@1.5.4/dist/peerjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js"></script>
<script src="~/js/session.js"></script>
<script>
    window.sessionState = @Html.Raw(Json.Serialize(new
        {
            isSessionStarted = Model.IsSessionStarted,
            sessionId = Model.CurrentSessionId
        }));
    window.isSessionLecturer = @Json.Serialize(Model.IsSessionLecturer);
    window.currentUserFullName = "@HttpContext.Session.GetString("FullName")";
    window.currentUserId = "@HttpContext.Session.GetString("MatricNo")";
    console.log("Session state set:", window.sessionState, "User:", window.currentUserFullName, "UserId:", window.currentUserId);

    function toggleAudio() {
        const stream = window.localStream;
        if (stream) {
            const audioTracks = stream.getAudioTracks();
            for (const track of audioTracks) {
                track.enabled = !track.enabled;
                const button = document.getElementById("toggleAudio");
                if (button) {
                    button.innerHTML = track.enabled
                        ? '<i class="fas fa-microphone-slash"></i> Mute'
                        : '<i class="fas fa-microphone"></i> Unmute';
                }
            }
        }
    }
       document.getElementById('shareScreen').addEventListener('click', () => {
        if (window.startScreenShare) {
            window.startScreenShare();
        } else {
            console.error("startScreenShare function not found.");
            alert("Screen sharing is not available.");
        }
    });


    document.addEventListener('DOMContentLoaded', () => {
        const sessionVideo = document.getElementById("sessionVideo");
        if (sessionVideo) {
            sessionVideo.onloadedmetadata = () => {
                console.log("Metadata loaded. Stream:", sessionVideo.srcObject);
            };
        }

        if (window.sessionState?.sessionId && window.isSessionLecturer && typeof connection !== 'undefined') {
            connection.invoke("StartSession", window.sessionState.sessionId)
                .catch(err => console.error("StartSession failed:", err));
        }

        const handleCheckboxGroup = (checkboxName, anyValue) => {
            const checkboxes = Array.from(document.querySelectorAll(`input[name="${checkboxName}"]`));
            const anyCheckbox = checkboxes.find(cb => cb.value === anyValue);

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    if (checkbox.value === anyValue) {
                        const isAnyChecked = checkbox.checked;
                        checkboxes.forEach(cb => {
                            if (cb.value !== anyValue) {
                                cb.disabled = isAnyChecked;
                                if (isAnyChecked) cb.checked = false;
                            }
                        });
                    } else if (checkbox.checked && anyCheckbox) {
                        anyCheckbox.checked = false;
                    }
                });
            });
        };

        handleCheckboxGroup('AllowedDepartments', 'Any');
        handleCheckboxGroup('AllowedLevels', 'Any');

        const messagePopup = document.getElementById('messagePopup');
        if (messagePopup && messagePopup.innerText.trim() !== "") {
            messagePopup.classList.add('show');
            setTimeout(() => {
                messagePopup.classList.remove('show');
            }, 5000);
        }

        const toggleView = document.getElementById('toggleView');
        if (toggleView) {
            toggleView.addEventListener('click', () => {
                const participantsContainer = document.getElementById('participantsContainer');
                const discussionContainer = document.getElementById('discussionContainer');
                if (participantsContainer.style.display === 'none') {
                    participantsContainer.style.display = 'block';
                    discussionContainer.style.display = 'none';
                    toggleView.textContent = 'Show Discussion';
                } else {
                    participantsContainer.style.display = 'none';
                    discussionContainer.style.display = 'block';
                    toggleView.textContent = 'Show Participants';
                }
            });
        }
    });
</script>